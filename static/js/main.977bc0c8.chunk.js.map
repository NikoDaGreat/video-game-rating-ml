{"version":3,"sources":["store.js","components/Score.js","components/Genres.js","App.js","index.js"],"names":["reducer","combineReducers","genres","state","action","type","id","console","log","filter","e","store","createStore","Score","genresSelected","useSelector","useState","model","setModel","score","setScore","useEffect","a","tf","newModel","className","Button","variant","size","onClick","event","preventDefault","vector","Array","fill","forEach","index","splice","tensor","prediction","predict","dataSync","toFixed","Genres","dispatch","useDispatch","SearchBar","Search","tags","Tags","data","selectRow","mode","clickToSelect","selected","onSelect","row","isSelect","onSelectAll","rows","keyField","columns","dataField","text","style","fontFamily","search","props","searchProps","baseProps","CardColumns","map","tag","find","Card","bg","width","color","margin","Title","name","App","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.977bc0c8.chunk.js","sourcesContent":["import { createStore, combineReducers } from 'redux'\n\nconst genreReducer = (state = [], action) => {\n  switch (action.type) {\n  case 'genre/add': {\n    const { id } = action\n    console.log('added:', id)\n    return [...state, id]\n  }\n  case 'genre/remove': {\n    const { id } = action\n    console.log('removed:', id)\n    return state.filter((e) => e !== id)\n  }\n  default: {\n    return state\n  }\n  }\n}\n\nconst reducer = combineReducers({\n  genres: genreReducer,\n})\n\nconst store = createStore(\n  reducer,\n)\n\nexport default store\n","import React, { useState, useEffect } from 'react'\nimport Button from 'react-bootstrap/Button'\nimport { useSelector } from 'react-redux'\nimport * as tf from '@tensorflow/tfjs'\n\nconst Score = () => {\n  const genresSelected = useSelector((state) => state.genres)\n  const [model, setModel] = useState()\n  const [score, setScore] = useState(0.0)\n\n  // Load TensorFlow model on first render\n  useEffect(async () => {\n    const newModel = await tf.loadLayersModel('https://raw.githubusercontent.com/NikoDaGreat/video-game-rating-ml/main/public/model/model.json')\n    setModel(newModel)\n  }, [])\n\n  const handlePredict = (event) => {\n    event.preventDefault()\n\n    const vector = Array(378).fill(0)\n    const indices = genresSelected\n    indices.forEach((index) => {\n      vector.splice(index, 1, 1)\n    })\n\n    const tensor = tf.tensor2d(vector, [1, 378], 'int32')\n    const prediction = model.predict(tensor)\n    setScore((prediction.dataSync()[0] * 100).toFixed(2))\n  }\n\n  return (\n    <>\n      <p className=\"score\">\n        Rating:\n        {' '}\n        <span className=\"latex\">\n          {score}\n          {' '}\n          %\n        </span>\n      </p>\n      <Button className=\"predict\" variant=\"primary\" size=\"xxl\" onClick={handlePredict}>\n        Predict ðŸš€\n      </Button>\n    </>\n  )\n}\n\nexport default Score\n","import React from 'react'\nimport Card from 'react-bootstrap/Card'\nimport CardColumns from 'react-bootstrap/CardColumns'\nimport BootstrapTable from 'react-bootstrap-table-next'\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit'\nimport { useSelector, useDispatch } from 'react-redux'\nimport Tags from './tags.json'\n\nconst Genres = () => {\n  const genresSelected = useSelector((state) => state.genres)\n  const dispatch = useDispatch()\n\n  const { SearchBar } = Search\n\n  const columns = [{\n    dataField: 'name',\n    text: 'Genre',\n  }, {\n    dataField: 'effect',\n    text: 'Positive effect',\n    style: { fontFamily: 'Computer Modern Serif, serif' },\n  }]\n\n  const tags = Tags.data\n\n  const handleOnSelect = (row, isSelect) => {\n    if (isSelect) {\n      dispatch({ type: 'genre/add', id: row.id })\n    } else {\n      dispatch({ type: 'genre/remove', id: row.id })\n    }\n  }\n\n  const handleOnSelectAll = (isSelect, rows) => {\n    if (isSelect) {\n      rows.forEach((row) => {\n        dispatch({ type: 'genre/add', id: row.id })\n      })\n    } else {\n      rows.forEach((row) => {\n        dispatch({ type: 'genre/remove', id: row.id })\n      })\n    }\n  }\n\n  const selectRow = {\n    mode: 'checkbox',\n    clickToSelect: true,\n    selected: genresSelected,\n    onSelect: handleOnSelect,\n    onSelectAll: handleOnSelectAll,\n  }\n\n  return (\n    <>\n      <ToolkitProvider\n        keyField=\"id\"\n        data={tags}\n        columns={columns}\n        search\n      >\n        {\n          (props) => (\n            <div>\n              <h3>Search for genres:</h3>\n              <SearchBar {...props.searchProps} />\n              <hr />\n              <BootstrapTable\n                {...props.baseProps}\n                selectRow={selectRow}\n              />\n            </div>\n          )\n        }\n      </ToolkitProvider>\n\n      <h3>Selected tags:</h3>\n      <CardColumns>\n        {\n          genresSelected.map((id) => {\n            const tag = tags.find((e) => e.id === id)\n            return (\n              <Card bg=\"primary\" style={{ width: '14rem', color: 'white', margin: 4 }}>\n                <Card.Title>{tag.name}</Card.Title>\n              </Card>\n            )\n          })\n        }\n      </CardColumns>\n    </>\n  )\n}\n\nexport default Genres\n","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css'\nimport Score from './components/Score'\nimport Genres from './components/Genres'\nimport './App.css'\n\nconst App = () => (\n  <div className=\"App\">\n    <header className=\"App-header\">\n      Predicting Video Game Rating from Genres using Multilayer Perceptron\n    </header>\n\n    <p>\n      A multilayer-perceptron-based machine learning model was trained with\n      Steam data to predict a numeric rating for a video game based on its\n      classified genres (user tags from Steam).\n      See report\n      {' '}\n      <a href=\"https://github.com/NikoDaGreat/video-game-rating-ml/blob/main/training/report.pdf\">here</a>\n      {' '}\n      for more detailed explanation.\n    </p>\n    <p>\n      Here you can predict ratings using the model by selecting genre tags.\n    </p>\n\n    <Genres />\n    <Score />\n\n  </div>\n)\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}