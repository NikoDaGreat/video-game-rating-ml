{"version":3,"sources":["store.js","components/Score.js","components/Genres.js","App.js","reportWebVitals.js","index.js"],"names":["reducer","combineReducers","genres","state","action","type","id","console","log","filter","e","store","createStore","Score","useState","model","setModel","score","setScore","useEffect","a","tf","newModel","className","Button","variant","size","onClick","event","preventDefault","vector","Array","fill","forEach","index","splice","tensor","prediction","predict","dataSync","toFixed","Genres","genresSelected","useSelector","dispatch","useDispatch","SearchBar","Search","tags","name","effect","selectRow","mode","clickToSelect","selected","onSelect","row","isSelect","keyField","data","columns","dataField","text","search","props","searchProps","baseProps","CardColumns","map","tag","find","Card","bg","style","width","Title","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb37fea8.chunk.js","sourcesContent":["import { createStore, combineReducers } from 'redux'\n\nconst genreReducer = (state = [], action) => {\n  switch (action.type) {\n  case 'genre/add': {\n    const { id } = action\n    console.log('added:', id)\n    return [...state, id]\n  }\n  case 'genre/remove': {\n    const { id } = action\n    console.log('removed:', id)\n    return state.filter((e) => e !== id)\n  }\n  default: {\n    return state\n  }\n  }\n}\n\nconst reducer = combineReducers({\n  genres: genreReducer,\n})\n\nconst store = createStore(\n  reducer,\n)\n\nexport default store\n","import React, { useState, useEffect } from 'react'\nimport Button from 'react-bootstrap/Button'\nimport * as tf from '@tensorflow/tfjs'\n\nconst Score = () => {\n  const [model, setModel] = useState()\n  const [score, setScore] = useState(0.0)\n\n  // Load TensorFlow model on first render\n  useEffect(async () => {\n    const newModel = await tf.loadLayersModel('https://raw.githubusercontent.com/NikoDaGreat/video-game-rating-ml/main/public/model/model.json')\n    setModel(newModel)\n  }, [])\n\n  const handlePredict = (event) => {\n    event.preventDefault()\n\n    const vector = Array(378).fill(0) // tf.zeros([1, 378])\n    const list = [0, 3]\n    list.forEach((index) => {\n      vector.splice(index, 1, 1)\n    })\n\n    const tensor = tf.tensor2d(vector, [1, 378], 'int32')\n    const prediction = model.predict(tensor)\n    setScore((prediction.dataSync()[0] * 100).toFixed(2))\n  }\n\n  return (\n    <>\n      <p className=\"score\">\n        Rating:\n        {' '}\n        {score}\n        {' '}\n        %\n      </p>\n      <Button variant=\"primary\" size=\"xxl\" onClick={handlePredict}>\n        Predict\n      </Button>\n    </>\n  )\n}\n\nexport default Score\n","import React from 'react'\nimport Card from 'react-bootstrap/Card'\nimport CardColumns from 'react-bootstrap/CardColumns'\nimport BootstrapTable from 'react-bootstrap-table-next'\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit'\nimport { useSelector, useDispatch } from 'react-redux'\n\nconst Genres = () => {\n  const genresSelected = useSelector((state) => state.genres)\n  const dispatch = useDispatch()\n\n  const { SearchBar } = Search\n\n  const columns = [{\n    dataField: 'name',\n    text: 'Genre',\n  }, {\n    dataField: 'effect',\n    text: 'Positive effect',\n  }]\n\n  const tags = [{\n    id: 0,\n    name: 'Action',\n    effect: 80,\n  }, {\n    id: 1,\n    name: 'Platformer',\n    effect: 70,\n  }]\n\n  const handleOnSelect = (row, isSelect) => {\n    if (isSelect) {\n      dispatch({ type: 'genre/add', id: row.id })\n    } else {\n      dispatch({ type: 'genre/remove', id: row.id })\n    }\n    console.log(genresSelected)\n  }\n\n  const selectRow = {\n    mode: 'checkbox',\n    clickToSelect: true,\n    selected: genresSelected,\n    onSelect: handleOnSelect,\n  }\n\n  return (\n    <>\n      <ToolkitProvider\n        keyField=\"id\"\n        data={tags}\n        columns={columns}\n        search\n      >\n        {\n          (props) => (\n            <div>\n              <h3>Search for genres:</h3>\n              <SearchBar {...props.searchProps} />\n              <hr />\n              <BootstrapTable\n                {...props.baseProps}\n                selectRow={selectRow}\n              />\n            </div>\n          )\n        }\n      </ToolkitProvider>\n\n      <h3>Selected tags:</h3>\n      <CardColumns>\n        {\n          genresSelected.map((id) => {\n            const tag = tags.find((e) => e.id === id)\n            return (\n              <Card bg=\"primary\" style={{ width: '14rem' }}>\n                <Card.Title>{tag.name}</Card.Title>\n              </Card>\n            )\n          })\n        }\n      </CardColumns>\n    </>\n  )\n}\n\nexport default Genres\n","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css'\nimport Score from './components/Score'\nimport Genres from './components/Genres'\nimport './App.css'\n\nconst App = () => (\n  <div className=\"App\">\n    <header className=\"App-header\">\n      Predicting Video Game Rating from Genres using Multilayer Perceptron\n    </header>\n\n    <Genres />\n    <Score />\n\n  </div>\n)\n\nexport default App\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}